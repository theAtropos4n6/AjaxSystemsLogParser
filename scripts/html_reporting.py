import time
import os
import sys
import base64
import datetime
import urllib.parse

cur_time = time.strftime("%Y-%m-%d_%H-%M-%S")
log_cur_time = time.time()

global ajax_log
ajax_log = []

############################ICON SECTION BEGIN##############################################
myfavicon = """
AAABAAMAEBAAAAEAIABoBAAANgAAACAgAAABACAAKBEAAJ4EAAAwMAAAAQAgAGgmAADGFQAAKAAA
ABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAhkMbE4ZDGxODQh0jhzweEYdEHzGGQx09ikIdI4tDIS6HSCAghkMbE49AIBCA
ORwSi0YjFohEIi0AAAAAAAAAAIlDH2OJRh9jiEchXohFH3qIRiF0iEQgeIlGIF+IRCFtikUheodG
IXWJRSBoiEMfa4dFIJGJRiJbAAAAAAAAAACIRCIehkkkFZBOLBeqVQADVVUAA/8AAAGAgAACVVUA
A/8AAAGAAAACjUYjHYBAAASANyQOiUchNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJQh9s
iEIfSYhDHlyKRSBZmWYzBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACI
RB1PiEQhfIZDIIGIRB6Hh0MekZkzMwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAhEIcG4dDIJGHQx99iUQgcIdDHp+KRiBXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAIlEHnCJQx5Fh0Igf4hCHo+GQx52kkkkBwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACAQCAIgAAAAodEIHGJRR00iEIeTYk7Jw0AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACAVSoGhkYgNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiEQfSwAAAACSSSQH
iUMhRYdFIVWGRiA3h0MeRAAAAAGJRCBhikUhZI9QIBCIQx+niEUgdotGIxaLQyJEiUUhc4pKIBiJ
RiJqiEYhTQAAAACEQhwbiUEaJ4dAHEgAAAAAh0IdRoxAJhSKRiJ4ikUjOwAAAAAAAAAAAAAAAAAA
AACIQx9riUUhk4hEH62IRiM6h0MeioCAAAKGQx6Jh0YfQodFIVWLRiRNi0YjWIdEIJmORxwSiEci
kIhEII+PUCAQi0ckiIhEIVaIRSCYiUYggIhEH5qIRSGNiEIdjwAAAACHQh2MiEQfkpJJJA6JRSCR
AAAAAAAAAAAAAAAAAAAAAJVAKgyIRSCBiUUhk4ZDGxOIRiG5j0wpMohEH8OKSCJZiEUgmIlFIJeK
RyQyiEMfvolEIXuJRiBfiEQfmolDIX2JRiJbikYhsIhEIVaIRCFlikUfSodEHzGIRSGjiUMgeYhE
H5KIRiCWi0gkcohEH1oAAAAAAAAAAAAAAAAAAAAAAAAAAIhGIniJRiFUAAAAAI1OKlwAAAAAqlUq
BpkzMwWZMzMFgFUqBgAAAACAVSoGgE0zCgAAAAD/AAABgE0zCgAAAACAVSoGmTMzBZkzMwWJRiF1
AAAAAJJJJAefQCAIgAAAAodDIjWJRiGEikciUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJQCQckkkkBwAAAACZMzMF
hj0kFYlFHRr/AAABi0YfIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIhE
H86HQh3AiEMe0o1IJE6JQx+MiEQetIlGIluHRB7mi1EjFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACIRCIth0QfMYtGHSyIQx+9hkQfdIhDH6eHQh25hEIcG4dDHqQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAjEYgKIhDHueJRSHTh0QgwIZDHGOHRCBxh0YfdYhCH0mIRR7JiEMf
vZJJJBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiUUiNIdDH2qGQx6rh0QcQIdEHrOH
RR6Rh0YjQodDH9mJRCCth0Me55NTLSgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJRBs4ikQf
i4lEIaSHRBxAiEUgwYlFILWLSCQ5hkIdnopGIFeLRiFNgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAYdEH7OIRB9ah0UfgoZCHquGQh2PhkIdj4hCH5aHQx2wiEQffJlmMwUAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACJSCEniEMe54tGIDcAAAAAikUimI9LJSmJRCF7h0Mem4pFIiWHQx6G
hUcfGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLRh8hAAAAAIBAIAiIRB/biUUhfYhF
IVyJRh91iEQfdIdEIMCJRSI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAIhGIFiMQCYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAAAABgAAAA
AQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAGGSSQVgFUqBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA
gIACAAAAAAAAAAAAAAAAAAAAAAAAAAD/gIACAAAAAIBAQASIRB+DhkYgKKpVVQMAAAAAAAAAAAAA
AACAgIACAAAAAQAAAAAAAAAA/4CAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAGAgIACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItFInKHRSFG
AAAAAIBAQASIQx9yiUQkOIhEI16IRR/DhEIhH4hCHamASSQOVVUAA4lEH4qJRB/Dh0MgkYtGFwuJ
Qx+MiUYhmYlFIMCIRiCHiU4nDYpFIUaIRCC4iUUhvJBKJTeIRB9aiUYitohFIKeKQiQjAAAAAIhE
Ig+IQx5vi0YXFoZCHl2IQR1PAAAAAIhCHXyHQx01i0YlN4hFIMGIRiG7jEYjMwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAItGIDeIRCG7iUQif4hFIImIRCGsiUUdGohDHpiLRCRA/wAAAYZBHcuHSy0R
h0UgYIdFIJ+fYEAIiEUhlIpGInGIQx2Nikclb4BNGgqIQx6YiUsjQYdDH8yJSCcni0spLIlFH8uN
SigmiUEhJ4pGIYuIRR96iUYiaopGInGHQx+3jEkkVIZCHnCGQx5fAAAAAIdDHZWGRSFOh0QfzopJ
JCOJRiFFiUQgngAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIdLHhGIRCChiEUhXIpFIYWHQx+CmTMz
BYdCHpeJQBs4AAAAAIdCHdWIRCIth0Uhc4dFIIaAgAACiUYje4lGIYSHQx2MikUiSoBAQASHRB+E
jU0rU4dDHtKGUSgTjE0mFItHJM+LSSZlikcklohEIGmJRyNBiEMezYhEIWWHQx6sikcjSIhFIHaH
Qx9zgEAABIdEH6aIRCBpiEUg1YpFIGCIRSB2iUQfigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8A
AAGKRiBmiUQiYYlFH6uJRCQ4iUoiNIlGId6MSye/kkkkHIhCHeGKRyOwi0YlN4lEILeIRSDBiEUg
vZNNJyGJQx+MikYhsIhEILCIRCCpj0cfGYlFIneIQyDBiEQfyIdFIWSLRSFciEQguIhFIKeMRiMz
h0YhhIpFIWuKQh8ygDMaCohFIHaJRSLLiEMew4dEH8SMSCY1iUQfxI1HI0GKSCRVikogGAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHSCAgiEUhwYdDH66AgAACAAAAAIpGIoeQUy43AAAAAJ9g
QBCOVTkJVVUAA6pVVQOORyoSqlVVAwAAAACLXS4LqlVVA4xNJhSZZjMFAAAAAAAAAAGIVSIPmU0z
CgAAAAAAAAAAjkcqEpJJNw4AAAAAnU4nDYlEH7WGSSQVAAAAAI5VOQmOVTkJkkkxFZkzMwUAAAAA
iUUgiIlHIYSLRyRWikckMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAikcjSIhHJCsA
AAAAAAAAAJVVNRiOVTkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIlKIjSJRScaAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAkkkkB4pDHkyIQyBYjkslIgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkzMwWATRoKAAAAAQAAAAAAAAAAqlUAA4BAFQyA
AAACgEAqDAAAAACAQCAIjlUcCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIlFH3OIRB6P
hkEcSodDIFeKRSFGiEQfS4dDHpGKRSM7iEQemo1DIiaKRCBxiUQflYhVIg8AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAIlEINGIRB/chkIdsYdEHsSIRB+SikolU4hEH8uJRCA4h0Me1YxGJiiIRB+0
h0Qe7pJPKioAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSSSQHj0AgEIdIIjWIRiBYhUcfGYlEIWyIRiGLiUgh
TohDH8WIRB48hkMdy4hEIg+IQx52iEMflAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJJJAeKRR9kh0QfoolG
I1+JRCJhiEQfloZCHryHQh2fh0Qel4dDHqiIQx2UiEMftIhEH5aIRCCPiEMgiQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAJJJJA6IQx6fh0Qe4odEIMiHRB/Oh0Qe04dDHXOJRSJDiEUggYhGIYOKSCJZikUlMIZD
He2HQx7CikUgn41KKCaPUCAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJRB8piEcfWopCJCOHRB9ThkEdoIdDHWqH
Qh5/iUYgp4lFIZOHRR+iiEckK4dDHeyIQyCni0Yje4dDHvGJRSGbi0YuCwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAIpDIEiJRSCxh0Qg0YdDHWqHQh5/iUchbIxJJkmIRR6YiEckK4dDHuiJRiGEikYjZohFILaK
SCR4jlU5CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACOQhwbh0Ied4lDHpmHRCDChkMfz4dBHWqIRB5liUYhwolFIcCJQyGM
jUooJoZDHeKIRSBniUQfioxKIR+JTicNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFQx5FiUQfxIhEH3yIRR6YiUUg
wIZCHpKJRh5FiUYeRYlGHkWJRh5FikUiWYdCHe6HQx6whkIezYhVMw8AAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBA
IAiHQx99iEQfz4lEJDgAAAAAhUMbQYdDH66IQx++h0QfnYdDH9+HQh2ThkMd4odDH2qAQCAIkE4s
FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAIBAKgyHRB+diEMe64pFIVUAAAAAAAAAAIpFIFmJRiF7jkkoRodF
IMiHRiMzh0Md0YpFIzuHRR+Ch0Me1YtHIkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACPRx8ZjUYjOgAAAAAA
AAAAgFUqBohEH9iHRSDBikcifodCH8CKRiBXhkMezYlEH76HRB7TiEUgvYhGIngAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgEAqDIhEH8OJRiGojUYjHYpKKhiqVQADikogGAAAAACG
RiAoiUUhXY5HHBIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI9HHxmFRx8Z
gIAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAA==
"""

myfavicon_png = \
"""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
ggj8P8oX5BqnQOvzAAAAAElFTkSuQmCC"""

twitter_icon = """
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
"""
discord_icon = """
iVBORw0KGgoAAAANSUhEUgAAAIEAAAB4CAYAAADVPZGBAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA5fSURBVHhe7Z0HeBVVFsfPnXkllSQUlV4iQWmC
FBFBRaxr+USRosFFIIqr67prWdcFAd21l092LZjAbmSJCbD6bdFVFBDE9gG6CwJGAlIERFqKKa/N
3XMmN5BIHnllZt57mfv7Pnhzb15mJnP+99x27h0GBnHTTVx1ZRzpGAD3SIDAMA5KDjCezTi044yl
44VSxVclIcIBqhnnVcDgMCZ3cA6lDNh60NRPAlUpB5ctY4H6b0ZHVCKYM2eOsnXfvQMV5rgebzYX
jd4LT2mYsCRB4AiwMrTeYq6yt5a+mrYFnztqJjIiMthFc7ij04GqazQNHmSMj5CGjyG6IOBjhcPT
/sr33lm2bELY3iFM43E2Ia9iLOPsecbYAJEpiRNQDl8CV35TsjD9Q5EVEiGLIHdm1Wk+v/ZnNP54
TMqSH6+QZ2BQ7HLBLxe/lHFE5J6SkIw5aXr5Zdi4K0QBdBRZkniH830A2q3FBVmrRE5QFPEZlIl5
lXeCwv4jBZBgMNYZe2jvTppRmSdygnIKEWD9P6NiHrqKl/GMqsiUJBBYcJ1oxwUohFlkT5F9EkF+
wNnEvIrZDJR5IkOS0FBDgc8qKch4Ak1+UleyWRFMnFE5HTt9BSIpaRVgT1KD24oXZhSKjOOcJILJ
08uHYyPwY/QlDpElaSWgN/AwjY8qXpS5QWTpNGkT5OYeSEUBFEkBtE6wjeAGVVlyze37UkSWThMR
+JOS5+I3s0VS0jrJSdXS5ohjnePVwcS88mxsD36Dammx2yhJbLBa8IGq5ZQsyNpF6cYGf0QKwB7o
XceAOlck6z3B+DuqO6sB/x4pAhvBuR80b/fiRR3260ZX/b5pUgA2gxr/insaHdYbnrGp+qfEZnDd
7owahAyUMj1PYjM4V/z8TIVx5TKRI7EdjGkqXI7VARsociS2RB2oANOkCOwM2l8BzjqLpMSOoP0V
n6+qrUhKbAjZX3G60tJFWmJDyP7UMAwSWCKxB3KUUIJIEUikCCRSBBJEiiBMWmMzmk3Kq4x4NWs8
0CadQaczFOjVXYUe3RTo0VWFF1+rhX0HNPEN48juqcLMnydB2bcB2LVXg527AnDgoAY/Vif0I0w8
EaSmMOjVQ4X+Z6kwqL8DOndUQP3J0phNWwPw5Is1FGRtGAr6zNn3pcBZvZtezB8A2POdhtf0w7bS
AOxAYVTXJJYoEkIEmRkMzh3ogPOGOKFfH/Uko/8UMv5jz9XAtm8M2cNBhwT323uSRSo4AbzkV9sC
8NlGH3y52Q8VCVDG4lYEVOJHDHXAxRc4IRtLfrh18dfbA/DoszXgcjFIcmO1kcaw6lAgNRUgOYmB
y8nA4aiv4zV8AgE/gNfHoaaWY0kGqKzS8B+HOg+Wdsz/w8Op0LN7eE0oDWskqjrWfuqDT9f79XPH
I3ElAjJITrYKl4x26qXe7RI/iADyBscqOKRg4U1yR9aao3PUeeqFkIXeKBo8eJ7PNvrhg7U+KNtp
nIcygrgSwagRTvjFtKRgCyRbBSSsF16thfVfouuJE+Kmi9g2i8G0m92tWgAEebsZuUmQjtVTvBAX
IqAHc+dtyXpdbQeoW0tCCLedYxZxIQJq/FGXz04MP9cBFwx3ilRsibkIqPuXOx6b7zZk6mQ3ZLaJ
vTuIuQhyb0qCFOwO2hHqBk+6IfYFIKYi6N1LhZHD7L0KfvT5Tn3IO5bETAQ0DDt1EvYG7OkEjqPg
33/zjbH1BjETwflDsQT0sFdjMBj9sFE8fHDsPGJMREBj/zdeG8VwYCuE2gYtzYmYRUxEMHKYEzqe
HjMnFJfQ84hVl9FyS1BbYNzV0gs0x3VXuvTnYzWWX/LcAQ7pBYJAsRE0ZW41llqDegJXXy69wKm4
8hLrn4+lIuiCSu9zpuwRnIq+fVTo0slaT2np1caMdtl+XKAl6PmMvdBab2CZCCjCZ9R5co/MUDhv
iMPS7qJlIuibo8bVHHo8Q1FMA/taV2AsEwFFDUlCh+IrrcKS8DIn/j0vP5MGaanGegK/H2Dj//zw
1TY/HDrCwYk6O+M0BYYNduixikZCYWGlZQHY8F8/fP+Dpoead2inYIlV9W6d0e67oorDXQ/+qEcv
m40lIji7twqPPNBkT+Wo2bwtAAuX1MFBNEhz9D/bATNy3XB6h+id3cFDGrz2eh1sLW3eIiS8GVOS
9HB4I5n7dI0uPLOxpDo4p7+xrm3d5354an5NUAEQ5B1mP1EDe/dFtxKJFpbMerwmqAAI8gy02GXd
5z6RYwzn9LOmSjBdBNTlGTTAuD/m2z0aLCisDclNVv3I4dmXaiOO96+tw99/uTakZWZUNeUv9kQt
usZYFXJnugiSkhh0MnCY+I2/e/QHHio/HNbgnQ8iK6Hvf+iDQ/j7oeL1cli81CNS0dOtiwoOC3Rg
ugi6d1H0BpsRUONvS2n48fprP/HpDbtwoO+vWB2+eL7ebtzSM7cbn19X81VgugiMDJ3aviOgL+0K
lyPHNPwXnmFIcEfLw7+YDzW6bbtxjTkrhtnN9wRdjbtEJEYhSDjhLh8vr9DC9h4NHDka2X02hxXz
CAnlCSLti1Pj1BVmlUSLVSPF7TJuPMSKaXdTr0CDRBkGxtWfEWGfP5L7aJel6EGgkWBk6aVxDrMn
3UwVAfUMjBwlzMH6kQwaLj3RG1GMfziQaHpGEAiblla/iYZR0HyLarIzMPX0GenMUBWTIS8ZHd40
K12fwrYi4doIAmAuvdAZdtVzKqhayswwVwWmnp0WXhrN+Otc0L5t6LdN8wiDIxysot8NJ9yLwsOu
v8r4WIDT2iewCDJMUDBVLw/9Khnat2v53DR/MHNq5Kt/KeiT9kvo26dlIVDdff9dydi3N174aWni
wCRMFYFZgRFU4h7/fQqMRdfb3EOnenTSODc8dE/0y92pCnr43mSYfIO72XgICpYZM8oJf8T7oYkk
Mwi3PRMups4i0rYzeVOSRMocaF6ANoqimT6ng0FnbJmfnWPOcCvNV2wpDcC+/TSVzHU3PbCfavq+
CoXFHnh3lVekjMdUEVx6kQum32LPZedGUrTcA/9aYZ4IErI6kBiLqSJwRdYol1iMqSLwGhtjYVvM
fo6miiDRtneNV3x+c5+jFEECUFcnDkzCVBEYvY2rFZG30ULTz0bfp9n7I5srAgM9Ae0efv+caj14
dM0nPvCa12OKCI8HYPU6H8zC+3twXjXs2mNcTMGxCuPO1Rxq/yG/myuODYcCNWnyg2LlIp2WbaBs
p6bvWr57r6bH/r+3yqcHddZPsDB9oMhqatHTUej7sn94YVFRnb538bFyDm2zFOjVQ4k6FoCCYVau
pc2xfRFFVIWKJesOaCEIjRxGO89OD4IWm7z5thdL2gmfS0EcfXqrMGSgQw/HopdgGBXX2Bhqpe8/
oOlxhBs3BfRwN4+3/vHR/AQF0NAGHDRhFe1mE3tQ4Av/Vgff4DXMxhIREDRwdO0VLhj3Mze4opxo
o3qX1gO8s9KrbxRNJbIxNJ6f3V2BHt1UfZ6BxvTbt2W6V6LgzZYg104u+PBRrq8p2P99/VtOdu4O
gO8n3bWUZKbvTnrVWBd07Rx9AAhd+823PfDvFV5TS39jLBNBAx3aKzDperdhK2937tZg9uPV+jsL
WoIM1DA/T3P+9M4DugdqyNG7Dqikl5fXLzELJb6QfvfJ2amGRBKRwT/d4IeStzxw6IhF1hdYLoIG
6MFNQDHQ9jWRioEe3JPza2Hz1vDD0I2C4g1oCjlSD0AC/GKTH5b/06NXAbEgZiJogF5cRdO+A/pi
4zHMAkUlZ/5rtSIVG8j4D9ydHHbgCgmY3tVEJX/XXvPr/VMRcxE0QI25K8a4YPT5jpCmZmkg6r5H
quPiHUM0pfzUnFT9NTstQe2Xjz73w4rVXlPe2BYJcSOCBkgAF4106gEj1Khrzs1SfT0/H7tkG+Jn
coLumaKYmoPulwz+/hqfvhqKXqkTT8SdCBog4/fE1v3I4Q4YOsihl7YGQaz8yAcFi00eSw0Ture7
pyfr90uQ4SnQhbq0tIp6N7r8UBqbsSBuRdAYGmjqiNXF6BFO6NZFgedfqQ1rUapVkBf79cxkKMPu
5LrPfPqLM+PV8I1JCBFIzCX6Dq4k4ZEikEgRSKQIJIgUgYREkAidGIl5cK5wzqpESmJDyP40DnNU
pCU2hOyvcODfibTEhpD9sU2gbBJpiS1RNmF1wDeLlMSGKIxvUpSAtkKkJbaDcx8PrFCK/pK5EzuJ
20WuxFaw7csLsr4Vg0XaX+s/JTZDt7sugoDqL+Scx0esk8QaOPeroJwQwfIF7fcxxl6nY4lNYGzx
kvy0A3QoqgMAPw88SuoQSUlrhoNHCfjnidQJEVADAeuDZ0VS0pph/LmiRW13i9QJERBaevqj+FFW
n5K0Ukrd3jaPiWOdJiJY/oJSq4F6M1YLxr2+QxI/cKhRuHZLYSFrEqrdRATE0vzU9Vgt3C6SklYC
9f44Y3lFBZkbRdZxThIBsbQgg3oKD9enJAkPKgD/f6gkP72oPqMpzYqAKM5v8wS6j7l0BpElSUB0
DwBsVklBxjMi6yTEmp7gTJxReTtj8Cc8NH77bompcOB1aOC7ivMzFomsZmlRBMSEacfGKIpSCIx1
FVmSOAcFsBs4m1JS0OYjkRWUoNVBY5Yuylrt53wQHpbI6iG+QfdP9lmiscA5oQiACMkTNGbitGNj
QVWfwV8cLLIkcQFZn32Bpfq+N/LbrBGZIRGSJ2hMyaKslVp5+jC86DV42TXU8BA/ksQEHkDXvwqL
/9VndUofHq4AiLA9QVM4m3xH5ZmaBrfiqcYx4H3xM8pzSlpCFLwtaPi3NM4XL1+YGdUor4EGw1bI
lMq2Xhe/FGUwlIOSA4xnMw7tOGP0NqRU8UVJiKCRqxnnVWilw5jcgf6+lAFbrzi1lUWvZJSj+Qxo
nwH8HwIH3SPEUL5qAAAAAElFTkSuQmCC
"""
github_icon = """
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
gg==
"""
ajax_log_icon = """
iVBORw0KGgoAAAANSUhEUgAAAIEAAAB4CAYAAADVPZGBAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAALiMAAC4jAXilP3YAAAPxSURBVHhe7d1LiM1hHMbx4z4LMe4LKWlKI0yU
jQVJVizYWFhJxEKSsmFD2EhJs1AUCxnJSG4Lya1IbpFbTSxQ0kShSGbcnt/5zcJ/5j0n83rfdI7v
p545vzmcOWbmcc478/7nP6WMris/AzmmpNSuhO6nTUnpjBK6nxNKSieV0P2cVbIY2HOJ/xglACUA
JYBQAlAClEoDei5/N0pZpixQpinjlGFKf41RBvlY8FX56GMSjcpQHwu6lA8+JmEflyE+FqS+n5FK
6OPdrbz3sV/s492pPFauKqeViv9eeyf3KV+U0NeppD7yWdmtDFcKmpWXSuhGpD7ToUxRyk8H9vDz
SJlkV+C/8kyZbSXYqOy1a3qxtti3eC2f7Ip+alWm+1hwWdnhYxLblXk+FlxSdvqYxC5lro8F15Rt
PiZR6f25qWzxsV9GKCuVpUpoDbjOXlT63vsFJXSjP8XeQZwcewe2QL+lhN5uu32J2KCEvFbsL6H2
fVde+NhHA98nQPnh/pyyuPxa0WFllY9RNilNPhbcUextp7JWafGxIPX92HPnTB8LHigHfExijTLL
xwJbvO/3McpxZbmPBefthZWg9/OE5ZCC+mElCH2ez/F0APYOQAkglACUAJQAQglACUAJIJQAlACU
AEIJkHUr2Y74CW0lI85dZbWPUf7JVvJDJfR2SVyuKH+DrWRURgmQdU1gP8ZmP9OANN4qN3yMwuFl
YE2AKigBKAEoAYQSgBKAEkAoASgBKAEk596BnQ0tdGo5xLFT0f3NqfIq7h3kLMF9JXTOIsSxcxAu
8jFKxRLkfDqw8+QMJkmTBWsCUIIa8qPnMrmcawI7KxolS8fOQGaLw1gcVAIOKkEVlACUAJQAQglA
CUAJIJQAlACUAJJz72C+Yr9/B2m8U+z3IMX6J3sHnKQibThJBfKhBMi6JjilTPURCdxW7PcbxuJ4
ArAmQBWUAJQAlABCCUAJQAkglACUAJQAQgmQdQNpgzLRRyTwXDnoYxQOKqmDcFAJ8qEEyLom2Kaw
JkinQ9njYxQOKgFrAlRBCUAJQAkglACUAJQAQglACUAJIJQAWTeQjihNPiKBe8p6H6NwUEkdhINK
kA8lQNY1wRKl0Uck0Klc9DEKB5WANQGqoASgBKAEEEoASgBKAKEEoASgBBBKgHIJvvnYxxjFNphQ
++zzOMHHPrrtD7cqO8uvFv1QWpU25YNdgZo0WrHd4NVK6D/1ZrtyrPJEGW/XVGC7TahN1R7NXykt
PpZKc5S3Su9tRlK/ea3MUArsrCLtSpcSuhGpj3xVjir2DFAWeqiYrKxQFirNii0o+Cqidtna7o3y
VLGDVW2N91LpUSr9AmDMe5tX1nFvAAAAAElFTkSuQmCC
"""
log_entries_icon = """
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
"""
about_icon = """
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
"""
icon_list = {"myfavicon.ico":myfavicon,
"twitter_icon.png":twitter_icon,
"discord_icon.png":discord_icon,
"github_icon.png":github_icon,
"log_entries_icon.png":log_entries_icon,
"ajax_log_icon.png":ajax_log_icon,
"about_icon.png":about_icon}
############################ICON SECTION FINISH##############################################
############################STANDARD HTML SECTION BEGIN##############################################
about = """
<!-- about.html-->
<!DOCTYPE html>
<html lang="en">
<head> <!>
    <meta charset="utf-8"> <!>
    <title>About</title>
    <link rel="icon" href="icons/myfavicon.ico">
</head>
<h1>About</h1>
<p>This tool is the result of a combined research effort towards interpreting API communication. The research is published here:&nbsp;<a href="paper-link"  rel="noopener">PAPER-LINK</a></p>
<nav><a href="../index.html">Home Page</a>
</nav>
<h3>Research Team:</h3>
<ul>
<li><em>Evangelos Dragonas</em></li>
<li><em>Costas Lamprinoudakis</em></li>
</ul>
<p>The tool is written in Python and is open-source.&nbsp;</p>
<p>If you found any bugs or you want to contribute to this project you may find us:</p>
<ol style="list-style: none; font-size: 14px; line-height: 32px; font-weight: bold;">
<li style="clear: both;"><img style="float: left;" src="icons/github_icon.png" alt="github" width="45" /> <a title="repo" href="https://github.com/theAtropos4n6">https://github.com/theAtropos4n6</a></li>
<li style="clear: both;"><img style="float: left;" src="icons/discord_icon.png" alt="discord" width="45" /><a href="https://discord.com/">theAtropos4n6#4634</a></li>
<li style="clear: both;"><img style="float: left;" src="icons/twitter_icon.png" alt="twitter" width="45" /><a href="https://twitter.com/theatropos4n6">@theAtropos4n6</a></li>
</ol>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p style="text-align: center;"><strong>Enjoy!</strong></p>
<p><strong>&nbsp;</strong></p>
"""
style = """
/* style.css

#181B20 -> black axiom
#ffffff Color Hex White
#2b2b2b Color Hex Gray17
 #20588B blue
#666666 Color Hex Gray40
------------
mine
#444441 black
#999993; grey
#eeeee4; ammos
 */

p {
    color: white;
    font-family: "Helvetica", "Arial", sans-serif;
    font-size: 1.3em;
}
a:hover {
  background: #ddd;
  color: black;
}
a {
    color: #ffffff;
    font-size: 1.3em;
    padding: 14px 16px;
}

nav {
text-align: right;

}

body {
    background-color: #2b2b2b;
    /*border: 1px solid #000;*/
    color: white;
    font-family: "Helvetica", "Arial", sans-serif;
    font-size: 1.1em;
}

.active {
  background-color: #04AA6D;
}

th {
  background-color: #181B20;
  color: white;
}

tr:hover {background-color: coral;}
tr {  background-color: #eeeee4;
    color: black;
    font-family: "Helvetica", "Arial", sans-serif;
    font-size: 1.3em;
    text-align: center;
}

tr td:last-child { 
   text-align: left;
}
tr.login { background-color: #0da31c;}
tr.login:hover {background-color: coral;}
tr.logout { background-color: #cfcf0e;}
tr.logout:hover {background-color: coral;}
tr.illegal_login { background-color: #cc1310;}
tr.illegal_login:hover {background-color: coral;}
"""
############################STANDARD HTML SECTION FINISH##############################################
def mylogger(text):
	try:
		ajax_log.append(str(text))
	except Exception as e:
		print(f"Error while store log file (mylogger). The error message was {e}")

def log_exporter(report_path,loglist):
	try:
		report_dir = f'{report_path}\\Reports_{cur_time}\\Report_files'
		if not os.path.exists(report_dir):
			os.makedirs(report_dir)
		with open(f'{report_dir}\\ajax_logfile.txt', "w",encoding="utf-8") as f:
			f.write(f"Ajax Systems Log Analyzer - Logfile. Created on: {cur_time}\n\n")
			for i in loglist:
				f.write(i)
	except Exception as e:
		print(f"Error while creating log file (mylogger). The error message was {e}")

def get_icon():
	thisicon = myfavicon_png.replace("\n","")
	myicon = bytes(thisicon,encoding='ascii')
	return myicon


def create_report_icons(report_path):
	try:
		report_dir = f'{report_path}\\Reports_{cur_time}\\Report_files\\icons'
		if not os.path.exists(report_dir):
			os.makedirs(report_dir)
		for k,v in icon_list.items():
			icon_file = base64.b64decode(v)
			with open(f'{report_dir}\\{k}', "wb") as f:
				f.write(icon_file)
	except Exception as e:
		mylogger(f"\n{log_cur_time}:Error while creating html report file (create_report_icons). The error message was {e}")


def create_report_stand_html(report_path):
	try:
		report_dir = f'{report_path}\\Reports_{cur_time}\\Report_files'
		if not os.path.exists(report_dir):
			os.makedirs(report_dir)
		with open(f'{report_dir}\\about.html', "w",encoding="utf-8") as f:
			f.write(about)
		with open(f'{report_dir}\\style.css', "w",encoding="utf-8") as f:
			f.write(style)
	except Exception as e:
		print(f"Error while creating html report file (create_report_stand_html). The error message was {e}")	

def create_report_folder_results(report_path,input_path,dir_dicto,rtype="Generic"):
	try:
		header = rtype + " Information" if not rtype == "Generic" else "Log"
		report_dir = f'{report_path}\\Reports_{cur_time}\\Report_files'
		if not os.path.exists(report_dir):
			os.makedirs(report_dir)
		with open(f'{report_dir}\\folder_results_{rtype}.html', "w",encoding="utf-8") as f:
			folder_results = ""
			folder_results += f"""
			<!-- folder_results.html-->
			<!DOCTYPE html>
			<html lang="en">
			<head> <!>
			    <meta charset="utf-8"> <!>
			    <title>{header} Entries</title>
			    <link rel="icon" href="icons/myfavicon.ico">
			</head>
			<h1 style="color: #5e9ca0;"><span style="color: #000000;">{header} Entries</span></h1>
			<table style="border-collapse: collapse; width: 99.5854%; height: 13px;" border="1">
			<tbody>
			<tr>
			<td style="width: 12.6961%;"><strong>Directory chosen:</strong></td>
			"""
			folder_results += """
			<nav><a href="../index.html">Home Page</a>
			</nav>
			"""
			folder_results += f'<td style="width: 37.5222%; text-align: left;">{input_path}</td>'
			folder_results += """
			</tr>
			</tbody>
			</table>
			<table style="border-collapse: collapse; width: 100%; height: 64px;" border="1">
			<tbody>
			<tr style="background-color: #999993;">
			<td style="width: 40%; height: 10px; text-align: center;" colspan="2"><strong>Log Files Found</strong></td>
			</tr>
			<tr style="background-color: #999993;">
			<td style="width: 9.51704%; height: 18px; text-align: center;"><strong>Number</strong></td>
			<td style="width: 30.4829%; height: 18px; text-align: center;"><strong>&nbsp;Filename</strong></td>
			</tr>
			"""
			counter = 1
			for k,v in dir_dicto.items():
				if "#" in k:
					escaped_filename = urllib.parse.quote(k)
					folder_results += '<tr style="height: 18px;">'
					folder_results+= f'<td style="width: 9.51704%; height: 18px; text-align: center;">{counter}</td>'
					folder_results+= f'	<td style="width: 30.4829%; height: 18px; text-align: center;"><a href="Report_android_log_{escaped_filename}.html">Log Info: {k}</a></td>'
					folder_results += '</tr>'
					folder_results += '<tr style="height: 18px;">'
					folder_results+= f'<td style="width: 9.51704%; height: 18px; text-align: center;">{counter}</td>'
					folder_results+= f'	<td style="width: 30.4829%; height: 18px; text-align: center;"><a href="Report_android_user_{escaped_filename}.html">User Info:{k}</a></td>'
					folder_results += '</tr>'
				else:
					folder_results += '<tr style="height: 18px;">'
					folder_results+= f'<td style="width: 9.51704%; height: 18px; text-align: center;">{counter}</td>'
					folder_results+= f'	<td style="width: 30.4829%; height: 18px; text-align: center;"><a href="Report_user_{k}.html">User Info: {k}</a></td>'
					folder_results += '</tr>'
					folder_results += '<tr style="height: 18px;">'
					folder_results+= f'<td style="width: 9.51704%; height: 18px; text-align: center;">{counter}</td>'
					folder_results+= f'	<td style="width: 30.4829%; height: 18px; text-align: center;"><a href="Report_hub_{k}.html">Hub Info:{k}</a></td>'
					folder_results += '</tr>'
					folder_results += '<tr style="height: 18px;">'
					folder_results+= f'<td style="width: 9.51704%; height: 18px; text-align: center;">{counter}</td>'
					folder_results+= f'	<td style="width: 30.4829%; height: 18px; text-align: center;"><a href="Report_log_{k}.html">Log Info:{k}</a></td>'
					folder_results += '</tr>'	
				counter += 1
			folder_results += '</tbody>'
			folder_results +='</table>'
			f.write(folder_results)
	except Exception as e:
		mylogger(f"\n{log_cur_time}:Error while creating html report file (create_report_folder_results). The error message was {e}")	

def html_report_parsed(dict_log,report_path,log_filename,time_zone_opt,platform,rtype):
	if rtype == "1":
		prefix = "user"
	elif rtype == "2":
		prefix = "hub"
	elif rtype == "3":
		prefix = "log"
	elif rtype == "4":
		prefix = "android_log"
	elif rtype == "5":
		prefix = "android_user"
	filename = os.path.basename(log_filename)
	report_dir = f'{report_path}\\Reports_{cur_time}\\Report_files'
	if not os.path.exists(report_dir):
		os.makedirs(report_dir)
	try:
		#Here the HTML report is being created
		if prefix == "user":
			with open(f'{report_dir}\\Report_{prefix}_{filename}.html',"w", encoding="utf-8") as html_file:
				counter = 1
				html_output = ""
				html_output += f'\n<!DOCTYPE html>'
				html_output += f'\n<html lang="en">'
				html_output += f'\n<head>'
				html_output += f'\n<meta charset="utf-8">'
				html_output += f'\n<title>{prefix}</title>'
				html_output += f'\n<link rel="icon" type="image/x-icon" href="icons/myfavicon.ico">'
				html_output += f'\n<link rel="stylesheet" href="style.css">'
				html_output += f'\n</head>'
				html_output += f'<p> Logfile: {log_filename}</p>'
				html_output += '\n'
				html_output += f'<p> {len(dict_log)} user related entries were recovered from the log provided.</p>'
				html_output += f'<p> Log Creation Date (UTC): {filename[20:-4]}</p>'
				html_output += '\n'
				html_output += f"<p> User's Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n'
				html_output += '\n<td>Log Creation Date (UTC)</td>'
				html_output += f'\n<td>{filename[20:-4]}</td>'
				html_output += '\n'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>User Email</th>'
				html_output += '\n<th style="width:15%">User Mobile</th>'
				html_output += '\n<th>User Name</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					html_output += f'<td>{v["agreementVer"]["userMail"]}</td>'
					html_output += f'<td>{v["agreementVer"]["userMobile"]}</td>'
					html_output += f'<td>{v["agreementVer"]["userName"]}</td>'
					html_output += '\n</tr>'
					counter+=1	
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_file.write(html_output)
		elif prefix == "hub":
			with open(f'{report_dir}\\Report_{prefix}_{filename}.html',"w", encoding="utf-8") as html_file:
				counter = 1
				html_output = ""
				html_output += f'\n<!DOCTYPE html>'
				html_output += f'\n<html lang="en">'
				html_output += f'\n<head>'
				html_output += f'\n<meta charset="utf-8">'
				html_output += f'\n<title>{prefix}</title>'
				html_output += f'\n<link rel="icon" type="image/x-icon" href="icons/myfavicon.ico">'
				html_output += f'\n<link rel="stylesheet" href="style.css">'
				html_output += f'\n</head>'
				html_output += f'<p> Logfile: {log_filename}</p>'
				html_output += f'<p> {len(dict_log)} hub related entries were recovered from the log provided.</p>'
				html_output += f'<p> Log Creation Date (UTC): {filename[20:-4]}</p>'
				html_output += '\n'
				html_output += f"<p> Hub Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>Hub Name</th>'
				html_output += '\n<th>Hub ID</th>'
				html_output += '\n<th style="width:15%">Hub Geolocation</th>'
				html_output += '\n<th>Powered On</th>'
				html_output += '\n<th>SIM Card State</th>'
				html_output += '\n<th>SIM Number</th>'
				html_output += '\n<th>Groups Enabled</th>'
				html_output += '\n<th>Time Zone</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					html_output += f'<td>{v["hub"]["hubName"]}</td>' if v["hub"]["hubName"] else '<td></td>'
					html_output += f'<td>{v["hub"]["objectId"]}</td>' if v["hub"]["objectId"] else '<td></td>'
					html_output += f'<td>{v["hub"]["geo_gps_coords"]}</td>' if v["hub"]["geo_gps_coords"] else '<td></td>'
					html_output += f'<td>{v["hub"]["gsm_simCardState"]}</td>' if v["hub"]["gsm_simCardState"] else '<td></td>'
					html_output += f'<td>{v["hub"]["gsm_activeSimNumber"]}</td>' if v["hub"]["gsm_activeSimNumber"] else '<td></td>'
					html_output += f'<td>{v["hub"]["hubPowered"]}</td>' if v["hub"]["hubPowered"] else '<td>""</td>'
					html_output += f'<td>{v["hub"]["groupsEnabled"]}</td>' if v["hub"]["groupsEnabled"] else '<td></td>'
					html_output += f'<td>{v["hub"]["timeZone"]}</td>' if v["hub"]["timeZone"] else '<td></td>'
					html_output += '\n</tr>'
					counter+=1		
				counter = 1
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_output += f"<p> Device Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>Device Number</th>'
				html_output += '\n<th>Device ID</th>'
				html_output += '\n<th>Device Index</th>'
				html_output += '\n<th style="width:15%">Firmware Ver.</th>'
				html_output += '\n<th>Object Type</th>'
				html_output += '\n<th>Online</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					inner_counter = 1 # for report's visualisation purposes
					for k1,v1 in v["devices"].items():
						html_output += f'<td></td>' if inner_counter !=1 else "" 
						html_output += f'<td></td>' if inner_counter !=1 else ""
						html_output += f'<td>{k1}</td>' if k1 else '<td></td>'
						html_output += f'<td>{v1["objectId"]}</td>' if v1["objectId"] else '<td></td>'
						html_output += f'<td>{v1["index"]}</td>' if v1["index"] else '<td></td>'
						html_output += f'<td>{v1["firmWareVersion"]}</td>' if v1["firmWareVersion"] else '<td></td>'
						html_output += f'<td>{v1["objectType"]}</td>' if v1["objectType"] else '<td></td>'
						html_output += f'<td>{v1["online"]}</td>' if v1["online"] else '<td></td>'
						html_output += '\n</tr>'
						inner_counter += 1
					counter+=1		
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				counter = 1
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_output += f"<p>Room Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>Room Number</th>'
				html_output += '\n<th>Room Name</th>'
				html_output += '\n<th>Room ID</th>'
				html_output += '\n<th>Room Index</th>'
				html_output += '\n<th style="width:15%">Hub Object ID</th>'
				html_output += '\n<th>Arm Delay</th>'
				html_output += '\n<th>Alarm Delay</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					inner_counter = 1 # for report's visualisation purposes
					for k1,v1 in v["rooms"].items():
						html_output += f'<td></td>' if inner_counter !=1 else "" 
						html_output += f'<td></td>' if inner_counter !=1 else ""
						html_output += f'<td>{k1}</td>' if k1 else '<td></td>'
						html_output += f'<td>{v1["roomName"]}</td>' if v1["roomName"] else '<td></td>'
						html_output += f'<td>{v1["objectId"]}</td>' if v1["objectId"] else '<td></td>'
						html_output += f'<td>{v1["index"]}</td>' if v1["index"] else '<td></td>'
						html_output += f'<td>{v1["hub_objectId"]}</td>' if v1["hub_objectId"] else '<td></td>'
						html_output += f'<td>{v1["armDelay"]}</td>' if v1["armDelay"] else '<td></td>'
						html_output += f'<td>{v1["alarmDelay"]}</td>' if v1["alarmDelay"] else '<td></td>'
						html_output += '\n</tr>'
						inner_counter += 1
					counter+=1			
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				counter = 1
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_output += f"<p>User Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>User Number</th>'
				html_output += '\n<th>User Name</th>'
				html_output += '\n<th>Last Name</th>'
				html_output += '\n<th>Email</th>'
				html_output += '\n<th style="width:15%">Mobile</th>'
				html_output += '\n<th>Admin User</th>'
				html_output += '\n<th>User Index</th>'
				html_output += '\n<th>Access Alarm Rules</th>'
				html_output += '\n<th>Access Arm Rules</th>'
				html_output += '\n<th>Access Arm/Disarm</th>'
				html_output += '\n<th>Access Event Rules</th>'
				html_output += '\n<th>Access Malf. Rules</th>'
				html_output += '\n<th>Access SMS Rules</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					inner_counter = 1 # for report's visualisation purposes
					for k1,v1 in v["users"].items():
						html_output += f'<td></td>' if inner_counter !=1 else "" 
						html_output += f'<td></td>' if inner_counter !=1 else ""
						html_output += f'<td>{k1}</td>' if k1 else '<td></td>'
						html_output += f'<td>{v1["userName"]}</td>' if v1["userName"] else '<td></td>'
						html_output += f'<td>{v1["lastName"]}</td>' if v1["lastName"] else '<td></td>'
						html_output += f'<td>{v1["userMail"]}</td>' if v1["userMail"] else '<td></td>'
						html_output += f'<td>{v1["userMobile"]}</td>' if v1["userMobile"] else '<td></td>'
						html_output += f'<td>{v1["masterUser"]}</td>' if v1["masterUser"] else '<td></td>'
						html_output += f'<td>{v1["userIndex"]}</td>' if v1["userIndex"] else '<td></td>'
						html_output += f'<td>{v1["alarmRules"]}</td>' if v1["alarmRules"] else '<td></td>'
						html_output += f'<td>{v1["armRules"]}</td>' if v1["armRules"] else '<td></td>'
						html_output += f'<td>{v1["armAccess"]}</td>' if v1["armAccess"] else '<td></td>'
						html_output += f'<td>{v1["eventRules"]}</td>' if v1["eventRules"] else '<td></td>'
						html_output += f'<td>{v1["malfRules"]}</td>' if v1["malfRules"] else '<td></td>'
						html_output += f'<td>{v1["shSMSRules"]}</td>' if v1["shSMSRules"] else '<td></td>'
						html_output += '\n</tr>'
						inner_counter += 1
					counter+=1		
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_file.write(html_output)
		elif prefix == "log":
			with open(f'{report_dir}\\Report_{prefix}_{filename}.html',"w", encoding="utf-8") as html_file:
				counter = 1
				html_output = ""
				html_output += f'\n<!DOCTYPE html>'
				html_output += f'\n<html lang="en">'
				html_output += f'\n<head>'
				html_output += f'\n<meta charset="utf-8">'
				html_output += f'\n<title>{prefix}</title>'
				html_output += f'\n<link rel="icon" type="image/x-icon" href="icons/myfavicon.ico">'
				html_output += f'\n<link rel="stylesheet" href="style.css">'
				html_output += f'\n</head>'
				html_output += f'<p> Logfile: {log_filename}</p>'
				html_output += f'<p> {len(dict_log)} log related entries were recovered from the log provided.</p>'
				html_output += f'<p> Log Creation Date (UTC): {filename[20:-4]}</p>'
				html_output += '\n'
				html_output += f"<p> Notifications Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>Notification Number</th>'
				html_output += '\n<th style="width:15%">Timestamp</th>'
				html_output += '\n<th>Timestamp Raw</th>'
				html_output += '\n<th>Device Name</th>'
				html_output += '\n<th>Device Type</th>'
				html_output += '\n<th>Device ID</th>'
				html_output += '\n<th>Notification Type</th>'
				html_output += '\n<th>Notification Event Type</th>'
				html_output += '\n<th>Object ID</th>'
				html_output += '\n<th>Room ID</th>'
				html_output += '\n<th>Room Name</th>'
				html_output += '\n<th>Index</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					inner_counter = 1 # for report's visualisation purposes
					for k1,v1 in v["log_entry"].items():
						html_output += f'<td></td>' if inner_counter !=1 else "" 
						html_output += f'<td></td>' if inner_counter !=1 else ""
						html_output += f'<td>{k1}</td>' if k1 else '<td></td>'
						html_output += f'<td>{v1["logTimestamp"]}</td>' if v1["logTimestamp"] else '<td></td>'
						html_output += f'<td>{v1["logTimestampRaw"]}</td>' if v1["logTimestampRaw"] else '<td></td>'
						html_output += f'<td>{v1["logDeviceName"]}</td>' if v1["logDeviceName"] else '<td></td>'
						html_output += f'<td>{v1["logDeviceType"]}</td>' if v1["logDeviceType"] else '<td></td>'
						html_output += f'<td>{v1["logDeviceId"]}</td>' if v1["logDeviceId"] else '<td></td>'
						html_output += f'<td>{v1["logType"]}</td>' if v1["logType"] else '<td></td>'
						html_output += f'<td>{v1["logEventType"]}</td>' if v1["logEventType"] else '<td></td>'
						html_output += f'<td>{v1["objectId"]}</td>' if v1["objectId"] else '<td></td>'
						html_output += f'<td>{v1["logRoomId"]}</td>' if v1["logRoomId"] else '<td></td>'
						html_output += f'<td>{v1["logRoomName"]}</td>' if v1["logRoomName"] else '<td></td>'
						html_output += f'<td>{v1["index"]}</td>' if v1["index"] else '<td></td>'
						html_output += '\n</tr>'
						inner_counter += 1
					counter+=1		
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_file.write(html_output)
		elif prefix == "android_log":
			try:
				log_creation_unix_ms_str = filename[-17:-4] if filename.endswith(".log") else filename[-13:]
				log_creation_unix_ms = float(log_creation_unix_ms_str)
				log_creation_unix = log_creation_unix_ms / 1000
				log_creation_date = datetime.datetime.utcfromtimestamp(log_creation_unix)
			except Exception as e:
				log_creation_date = "N/A"
			with open(f'{report_dir}\\Report_{prefix}_{filename}.html',"w", encoding="utf-8") as html_file:
				counter = 1
				html_output = ""
				html_output += f'\n<!DOCTYPE html>'
				html_output += f'\n<html lang="en">'
				html_output += f'\n<head>'
				html_output += f'\n<meta charset="utf-8">'
				html_output += f'\n<title>{prefix}</title>'
				html_output += f'\n<link rel="icon" type="image/x-icon" href="icons/myfavicon.ico">'
				html_output += f'\n<link rel="stylesheet" href="style.css">'
				html_output += f'\n</head>'
				html_output += f'<p> Logfile: {log_filename}</p>'
				html_output += f'<p> {len(dict_log)} log related entries were recovered from the log provided.</p>'
				html_output += f'<p> Log Creation Date (UTC): {log_creation_date}</p>'
				html_output += '\n'
				html_output += f"<p> Notifications Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>Device Name</th>'
				html_output += '\n<th>Device Type</th>'
				html_output += '\n<th>Device ID</th>'
				html_output += '\n<th>Room Name</th>'
				html_output += '\n<th>Room ID</th>'
				html_output += '\n<th>Event Type</th>'
				html_output += '\n<th>Event ID</th>'
				html_output += '\n<th>Server Received Timestamp</th>'
				html_output += '\n<th>Hub Name</th>'
				html_output += '\n<th>Hub ID</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					html_output += f'<td>{v["objName"]}</td>'
					html_output += f'<td>{v["objType"]}</td>'
					html_output += f'<td>{v["objId"]}</td>'
					html_output += f'<td>{v["objRoom"]}</td>'
					html_output += f'<td>{v["objRoomId"]}</td>'
					html_output += f'<td>{v["eventType"]}</td>'
					html_output += f'<td>{v["eventId"]}</td>'
					html_output += f'<td>{v["serverReceivedTimestamp"]}</td>'
					html_output += f'<td>{v["hubName"]}</td>'
					html_output += f'<td>{v["hubId"]}</td>'
					counter+=1		
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_file.write(html_output)
		elif prefix == "android_user":
			try:
				log_creation_unix_ms_str = filename[-17:-4] if filename.endswith(".log") else filename[-13:]
				log_creation_unix_ms = float(log_creation_unix_ms_str)
				log_creation_unix = log_creation_unix_ms / 1000
				log_creation_date = datetime.datetime.utcfromtimestamp(log_creation_unix)
			except Exception as e:
				log_creation_date = "N/A"
			with open(f'{report_dir}\\Report_{prefix}_{filename}.html',"w", encoding="utf-8") as html_file:
				counter = 1
				html_output = ""
				html_output += f'\n<!DOCTYPE html>'
				html_output += f'\n<html lang="en">'
				html_output += f'\n<head>'
				html_output += f'\n<meta charset="utf-8">'
				html_output += f'\n<title>{prefix}</title>'
				html_output += f'\n<link rel="icon" type="image/x-icon" href="icons/myfavicon.ico">'
				html_output += f'\n<link rel="stylesheet" href="style.css">'
				html_output += f'\n</head>'
				html_output += f'<p> Logfile: {log_filename}</p>'
				html_output += f'<p> {len(dict_log)} log related entries were recovered from the log provided.</p>'
				html_output += f'<p> Log Creation Date (UTC): {log_creation_date}</p>'
				html_output += '\n'
				html_output += f"<p> Notifications Information.</p>"
				html_output += '\n<table border = "1" width=100%>'
				html_output += '\n<thead>'
				html_output += '\n'
				html_output += '\n\n'
				html_output += '\n<tr>'
				html_output += '\n<th>Entry</th>'
				html_output += f'\n<th>Date Message Received ({time_zone_opt})</th>'
				html_output += '\n<th>User-ID</th>'
				html_output += '\n<th>First Name</th>'
				html_output += '\n<th>Last Name</th>'
				html_output += '\n<th>Phone</th>'
				html_output += '\n<th>Email</th>'
				html_output += '\n<th>RegistrationTime</th>'
				html_output += '\n<th>UserIndex</th>'
				html_output += '\n</tr>'
				html_output += "\n</thead>"
				html_output += '\n<tbody>'
				for k,v in dict_log.items():
					html_output += '<tr>'
					html_output += f'<td>{counter}</td>'
					html_output += f'<td>{k}</td>'
					html_output += f'<td>{v["User-ID"]}</td>'
					html_output += f'<td>{v["FirstName"]}</td>'
					html_output += f'<td>{v["LastName"]}</td>'
					html_output += f'<td>{v["Phone"]}</td>'
					html_output += f'<td>{v["Email"]}</td>'
					html_output += f'<td>{v["RegistrationTime"]}</td>'
					html_output += f'<td>{v["UserIndex"]}</td>'
					counter+=1		
				html_output += "\n</tbody>"
				html_output += '\n</table>'
				html_output += '\n'
				html_file.write(html_output)
	except Exception as e:
		print(f"Error while creating html report file. The error message was {e}")



def create_report_index(report_path,version,options):
	try:
		report_dir = f'{report_path}\\Reports_{cur_time}\\'
		if not os.path.exists(report_dir):
			os.makedirs(report_dir)
		with open(f'{report_dir}\\index.html', "w",encoding="utf-8") as f:
			index_file = ""
			index_file += """
			<!-- Index.html - Generic Results Summary-->
			<!DOCTYPE html>
			<html lang="en">
			<head> <!>
			    <meta charset="utf-8"> <!>
			    <title>Report</title>
			    <link rel="icon" href="Report_files/icons/myfavicon.ico">
			</head>
			"""
			index_file += f'<h1 style="color: #5e9ca0;"><span style="color: #3366ff;">Ajax Systems Log Analyzer v.{version} - Report</span></h1>'
			index_file += f"""
			<table class="editorDemoTable" style="height: 28px; width: 680px; border-style: solid; border-color: black;" border="1">
			<thead>
			<tr style="height: 18px;">
			<td style="width: 285.516px; height: 18px;"><strong>Report creation date:</strong></td>
			<td style="width: 378.484px; height: 18px; text-align: center;"><strong>{cur_time}</strong></td>
			</tr>
			</thead>
			<tbody>
			<tr style="height: 10px;">
			<td style="width: 285.516px; height: 10px;"><strong>Comments:</strong></td>
			<td style="width: 378.484px; height: 10px; text-align: center;"><strong><span style="color: #000000;"><em><span style="font-size: 14px;">'Trust but verify'</span></em></span></strong></td>
			</tr>
			</tbody>
			</table>
			<h2 style="color: #2e6c80; text-align: left;"><strong style="color: #000000; font-size: 14px;">&nbsp;</strong>Results are listed here:</h2>
			<ol style="list-style: none; font-size: 14px; line-height: 32px; font-weight: bold;">
			"""
			if options[0] == "log":
				if options[2] is not None and options[2] == "Android":
					escaped_filename = urllib.parse.quote(options[1]) # the # symbol in filename create errors as it is a special character in HTML
					index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/Report_android_log_{escaped_filename}.html" >Log entries</a></li>'
					index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/Report_android_user_{escaped_filename}.html" >User entries</a></li>'
				elif options[2] is not None and options[2] == "iOS":
					index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/Report_hub_{options[1]}.html" >Hub entries</a></li>'
					index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/Report_log_{options[1]}.html" >Log entries</a></li>'
					index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/Report_user_{options[1]}.html" >User entries</a></li>'
			elif options[0] == "folder":
				index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/log_entries_icon.png" alt="interactive connection" width="45" /><a href="Report_files/folder_results_Generic.html" >Log entries</a></li>'
			index_file += f'''<li style="clear: both;"><img style="float: left;" src="Report_files/icons/ajax_log_icon.png" alt="html table div" width="45" /><a href="Report_files/ajax_logfile.txt" >Ajax Systems Log Analyzer's log</a></li>'''
			index_file += f'<li style="clear: both;"><img style="float: left;" src="Report_files/icons/about_icon.png" alt="html table div" width="45" /><a href="Report_files/about.html" >About</a></li>'
			index_file += f'</ol>'
			f.write(index_file)
	except Exception as e:
		mylogger(f"\n{log_cur_time}:Error while creating html report file (create_report_index). The error message was {e}")

